var sjcl = require('../node_modules/sjcl/sjcl.js')
var ethUtil = require('../node_modules/ethereumjs-util')


// define the web3 object
var Web3 = require('web3');
if(typeof web3 === 'undefined'){
	web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
}

// Store accounts into new array
ethStoreAccounts = function ethStoreAccounts() {
	var accounts = web3.eth.accounts;
	return accounts;
}

// create account and return address
ethCreateAccount = function ethCreateAccount(password) {
  // password 'password' by default
  password = password || "password";
  var myAdrr = web3.personal.newAccount(password);
  return myAdrr;
}

// get balance for account
ethReturnBalance = function ethReturnBalance(address) {
	var myBalance = web3.fromWei(web3.eth.getBalance(address), "ether")
	return myBalance;	
}

// Sign file using account[0]
ethSignFile = function ethSignFile(address, password, hashedFile) {
	var address = address;
	var password = password;
	// Unlock account
	//web3.personal.unlockAccount(address, password);

	// Sign file hash
	var msg = new Buffer(hashedFile);
	console.log("signing: " + msg.toString('hex'));
	var signedData = web3.eth.sign(address, '0x' + msg.toString('hex'));

	// Sign file output
	//var msg2 = new Buffer(file_output);
	//var signedData2 = web3.eth.sign(address, '0x' + msg2.toString('hex'));

	return signedData;	
}

// Verify signature
ethVerifySig = function ethVerifySig(signature, hashedFile){
	//var r = "0x" + signature.slice(0, 64); 
	//var s = "0x" + signature.slice(64, 128); 
	//var v = "28;
	
	var res = ethUtil.fromRpcSig(signature);
	
	// Sign file hash
	var prefix = new Buffer("\x19Ethereum Signed Message:\n");
	var msg = new Buffer(hashedFile);
	var prefixedMsg = ethUtil.sha3(
	  Buffer.concat([prefix, new Buffer(String(msg.length)), msg])
	);
	var pubKey  = ethUtil.ecrecover(prefixedMsg, res.v, res.r, res.s);
	var addrBuf = ethUtil.pubToAddress(pubKey);
	var resultingAddr = ethUtil.bufferToHex(addrBuf);

	// Sign file output
	/*
	var msg2 = new Buffer(file_output);
	var prefixedMsg2 = ethUtil.sha3(
	  Buffer.concat([prefix, new Buffer(String(msg2.length)), msg2])
	);
	var pubKey2  = ethUtil.ecrecover(prefixedMsg2, res.v, res.r, res.s);
	var addrBuf2 = ethUtil.pubToAddress(pubKey2);
	var resultingAddr2 = ethUtil.bufferToHex(addrBuf2);
	*/

	return resultingAddr;
}

// NOT BEING USED
// Send transaction from account 1 to account 2
ethSendTransaction = function ethSendTransaction(fromAddr, fromPass, toAddr, filename){
	var fromAddress = fromAddr;
	var fromPassword = fromPass;	
	var toAddress = toAddr;	
	web3.personal.unlockAccount(fromAddress, fromPassword);

	if(web3.fromWei(web3.eth.getBalance(fromAddress), "ether")<0.03) {
		console.log('BalanceError');
		return false;
	} else {
		// Create signature
		const data = Assets.getText(filename);
		var hex_output = '';
		for (var i = 0, l = data.length; i < l; i++){
			hex_output += data[i].charCodeAt(0).toString(16) + ' ';
	  	}
	  	console.log(hex_output);

	  	// Hash the file
		var hash_bit_array = sjcl.hash.sha256.hash(hex_output);
		var hash_hex = sjcl.codec.hex.fromBits(hash_bit_array);  
		console.log("File hash: ");
		console.log(hash_hex);

		// Encrypt and Decrypt the hash with a password
		var cryptoPassword = "cryptoPassword";
		var encrypted = sjcl.encrypt(cryptoPassword, hash_hex);
		// var decrypted = sjcl.decrypt(encrypted);

		console.log("Encrypted hash: ");
	  	var parsedMessage = JSON.parse(encrypted);
	  	var ciphertext = parsedMessage["ct"];
	  	var cipher_hex = '0x';
	  	var hex_digit;
	  	for (var i = 0, l = ciphertext.length; i < l; i++){
			hex_digit = ciphertext.charCodeAt(i).toString(16);
			cipher_hex += hex_digit;
	  	}

  		// Create and send transaction with data
  		var transactionObject = {
			from: fromAddress,
			to: toAddress,
			data: cipher_hex,
		};	
		var result;
		//result = web3.eth.sendTransaction(transactionObject);
		console.log(result);

	}
	return result;
}






var projectContractAbi = web3.eth.contract([{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"returnProtocol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"returnTest","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"}],"name":"versions","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"signature","type":"string"},{"name":"client","type":"address"}],"name":"purchaseWithLicense","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"returnTemplate","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"signature","type":"string"}],"name":"returnPrintable","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"returnVersion","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"protocolSig","type":"string"}],"name":"setProtocol","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"signature","type":"string"}],"name":"setVersion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"signature","type":"string"},{"name":"client","type":"address"}],"name":"returnDrmLicense","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"testsSig","type":"string"}],"name":"setTest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"templateSig","type":"string"}],"name":"setTemplate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"}],"name":"projectFiles","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"printableSig","type":"string"}],"name":"createPrintable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"signature","type":"string"},{"name":"client","type":"address"},{"name":"quantity","type":"int256"}],"name":"setDrmLicense","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);

// Create smart contract
ethCreateProjectContract = function ethCreateProjectContract(ownerAddress, ownerPassword, _callback){

  //web3.personal.unlockAccount(ownerAddress, ownerPassword);
  var project_contract = projectContractAbi.new(
     {
       from: web3.eth.accounts[0],
       data: '0x6060604052341561000f57600080fd5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6122e8806100616000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306a5975b146100e95780630e1665141461018a578063105070ec1461022b57806337cda3e4146102eb5780633fd84b0a1461037f5780634c49bec1146104205780638767211f146104995780638da5cb5b1461053a578063920279321461058f578063a1d20653146105f9578063ad23800c14610663578063d490db8f146106f3578063d60a206f1461075d578063d969a023146107c7578063ef3d61eb14610871578063f82a5d03146108db575b600080fd5b34156100f457600080fd5b61010e600480803560001916906020019091905050610974565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014f5780820151818401525b602081019050610133565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101af600480803560001916906020019091905050610a4f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401525b6020810190506101d4565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023657600080fd5b61026f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091905050610b2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b05780820151818401525b602081019050610294565b50505050905090810190601f1680156102dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102f657600080fd5b610365600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be8565b604051808215151515815260200191505060405180910390f35b341561038a57600080fd5b6103a4600480803560001916906020019091905050610e17565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e55780820151818401525b6020810190506103c9565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042b57600080fd5b61047b600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ef3565b60405180826000191660001916815260200191505060405180910390f35b34156104a457600080fd5b6104be60048080356000191690602001909190505061103f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ff5780820151818401525b6020810190506104e3565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054557600080fd5b61054d611146565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059a57600080fd5b6105f760048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061116b565b005b341561060457600080fd5b61066160048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061120d565b005b341561066e57600080fd5b6106dd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061127f565b6040518082815260200191505060405180910390f35b34156106fe57600080fd5b61075b60048080356000191690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114a6565b005b341561076857600080fd5b6107c560048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611549565b005b34156107d257600080fd5b6107f56004808035906020019091908035600019169060200190919050506115ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108365780820151818401525b60208101905061081a565b50505050905090810190601f1680156108635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561087c57600080fd5b6108d960048080356000191690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506116a9565b005b34156108e657600080fd5b61095e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611810565b6040518082815260200191505060405180910390f35b61097c611a40565b600060016000808152602001908152602001600020600084600019166000191681526020019081526020016000209050808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b505050505091505b50919050565b610a57611a40565b60006001600060028152602001908152602001600020600084600019166000191681526020019081526020016000209050808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b1d5780601f10610af257610100808354040283529160200191610b1d565b820191906000526020600020905b815481529060010190602001808311610b0057829003601f168201915b505050505091505b50919050565b6002602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610be05780601f10610bb557610100808354040283529160200191610be0565b820191906000526020600020905b815481529060010190602001808311610bc357829003601f168201915b505050505081565b6000806000806000806003805490509450600093505b84841015610e0757600384815481101515610c1557fe5b906000526020600020906003020160005b509250876040518082805190602001908083835b602083101515610c6057805182525b602082019150602081019050602083039250610c3a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836002016040518082805460018160011615610100020316600290048015610cf05780601f10610cce576101008083540402835291820191610cf0565b820191906000526020600020905b815481529060010190602001808311610cdc575b50509150506040518091039020600019161415610df9578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cd3cb0f886000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610dce57600080fd5b6102c65a03f11515610ddf57600080fd5b505050604051805190509150600082139050809550610e0c565b5b8380600101945050610bfe565b600095505b505050505092915050565b610e1f611a40565b60006001600060018152602001908152602001600020600084600019166000191681526020019081526020016000209050808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ee55780601f10610eba57610100808354040283529160200191610ee5565b820191906000526020600020905b815481529060010190602001808311610ec857829003601f168201915b505050505091505b50919050565b60008060008060006003805490509350600092505b8383101561102e57600383815481101515610f1f57fe5b906000526020600020906003020160005b509150856040518082805190602001908083835b602083101515610f6a57805182525b602082019150602081019050602083039250610f44565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826002016040518082805460018160011615610100020316600290048015610ffa5780601f10610fd8576101008083540402835291820191610ffa565b820191906000526020600020905b815481529060010190602001808311610fe6575b505091505060405180910390206000191614156110205781600101549050809450611036565b5b8280600101935050610f08565b600060010294505b50505050919050565b611047611a40565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000209050808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111385780601f1061110d57610100808354040283529160200191611138565b820191906000526020600020905b81548152906001019060200180831161111b57829003601f168201915b505050505091505b50919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c657600080fd5b8060016000808152602001908152602001600020600084600019166000191681526020019081526020016000209080519060200190611206929190611a54565b505b5b5050565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000209080519060200190611279929190611a54565b505b5050565b60008060008060006003805490509350600092505b83831015611497576003838154811015156112ab57fe5b906000526020600020906003020160005b509150866040518082805190602001908083835b6020831015156112f657805182525b6020820191506020810190506020830392506112d0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168260020160405180828054600181600116156101000203166002900480156113865780601f10611364576101008083540402835291820191611386565b820191906000526020600020905b815481529060010190602001808311611372575b50509150506040518091039020600019161415611489578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cd3cb0f876000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561146457600080fd5b6102c65a03f1151561147557600080fd5b50505060405180519050905080945061149c565b5b8280600101935050611294565b600094505b5050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561150157600080fd5b806001600060028152602001908152602001600020600084600019166000191681526020019081526020016000209080519060200190611542929190611a54565b505b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115a457600080fd5b8060016000600181526020019081526020016000206000846000191660001916815260200190815260200160002090805190602001906115e5929190611a54565b505b5b5050565b6001602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116a15780601f10611676576101008083540402835291602001916116a1565b820191906000526020600020905b81548152906001019060200180831161168457829003601f168201915b505050505081565b60006116b3611ad4565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170e57600080fd5b611716611b15565b604051809103906000f080151561172c57600080fd5b91506060604051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001856000191681526020018481525090506003805480600101828161177a9190611b25565b916000526020600020906003020160005b83909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101906000191690556040820151816002019080519060200190611804929190611b57565b505050505b5b50505050565b60008060008060006003805490509350600092505b83831015611a305760038381548110151561183c57fe5b906000526020600020906003020160005b509150876040518082805190602001908083835b60208310151561188757805182525b602082019150602081019050602083039250611861565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168260020160405180828054600181600116156101000203166002900480156119175780601f106118f5576101008083540402835291820191611917565b820191906000526020600020905b815481529060010190602001808311611903575b50509150506040518091039020600019161415611a22578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bb8c71f88886000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156119fd57600080fd5b6102c65a03f11515611a0e57600080fd5b505050604051805190509050809450611a35565b5b8280600101935050611825565b600094505b505050509392505050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a9557805160ff1916838001178555611ac3565b82800160010185558215611ac3579182015b82811115611ac2578251825591602001919060010190611aa7565b5b509050611ad09190611bd7565b5090565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001611b0f611bfc565b81525090565b60405161060680611cb783390190565b815481835581811511611b5257600302816003028360005260206000209182019101611b519190611c10565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b9857805160ff1916838001178555611bc6565b82800160010185558215611bc6579182015b82811115611bc5578251825591602001919060010190611baa565b5b509050611bd39190611bd7565b5090565b611bf991905b80821115611bf5576000816000905550600101611bdd565b5090565b90565b602060405190810160405280600081525090565b611c6b91905b80821115611c6757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000611c5e9190611c6e565b50600301611c16565b5090565b90565b50805460018160011615610100020316600290046000825580601f10611c945750611cb3565b601f016020900490600052602060002090810190611cb29190611bd7565b5b5056006060604052341561000f57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b6105a3806100636000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009157806319ab453c146100ca57806341c0e1b5146101035780636bb8c71f1461011857806391b7f5ed1461016e5780639cd3cb0f14610191578063a035b1fe146101de578063f18a02c614610207575b600080fd5b341561009c57600080fd5b6100c8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610254565b005b34156100d557600080fd5b610101600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610330565b005b341561010e57600080fd5b61011661033d565b005b341561012357600080fd5b610158600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103d5565b6040518082815260200191505060405180910390f35b341561017957600080fd5b61018f6004808035906020019091905050610484565b005b341561019c57600080fd5b6101c8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104eb565b6040518082815260200191505060405180910390f35b34156101e957600080fd5b6101f1610559565b6040518082815260200191505060405180910390f35b341561021257600080fd5b61023e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061055f565b6040518082815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806102e657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561032c57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b61033981610254565b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561039857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6000806000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821415905080151561042f57600091505b838201915081600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508192505b505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104df57600080fd5b806001819055505b5b50565b6000806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600082141590508015156105495760009250610552565b819250610552565b5b5050919050565b60015481565b600260205280600052604060002060009150905054815600a165627a7a723058203f317452a905b2d8de797ece5578bccad5df30a5e523c285468e8d49329cd6fc0029a165627a7a72305820b382e85202adb63e5d917728caf0edd18177a46b85d5722d39c0e945d0b3ce890029',
       gas: '4300000'
     }, function (e, contract){
      //console.log(e, contract);
      if (typeof contract.address !== 'undefined') {
          console.log('project contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
        console.log(contract.address);
        _callback(contract.address);
      }
   });
}

// Set project protocol
ethSetProjectProtocol = function ethSetProjectProtocol(contractAddress, ownerAddress, ownerPassword, protoHash, protoSig){
  web3.eth.defaultAccount=ownerAddress;
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  var transactionHash = targetContract.setProtocol(protoHash, protoSig, {gas: 250000})
  
  return transactionHash;
}

// Get protocol from project
ethReturnProjectProtocol = function ethReturnProjectProtocol(contractAddress, fromAddress, fromPassword, protoHash){
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(fromAddress, fromPassword);

  var protoSig = targetContract.returnProtocol(protoHash)
  
  return protoSig;
}

// Set project template/details/tests
ethSetProjectTemplate = function ethSetProjectTemplate(contractAddress, ownerAddress, ownerPassword, templateHash, templateSig){
  web3.eth.defaultAccount=ownerAddress;
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  var transactionHash = targetContract.setTemplate(templateHash, templateSig, {gas: 250000})
  
  return transactionHash;
}

// Get template from project
ethReturnProjectTemplate = function ethReturnProjectTemplate(contractAddress, fromAddress, fromPassword, templateHash){
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(fromAddress, fromPassword);

  var templateSig = targetContract.returnTemplate(templateHash)
  
  return templateSig;
}

// Set project test file
ethSetProjectTest = function ethSetProjectTest(contractAddress, ownerAddress, ownerPassword, testsHash, testsSig){
  web3.eth.defaultAccount=ownerAddress;
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  var transactionHash = targetContract.setTest(testsHash, testsSig, {gas: 250000})
  
  return transactionHash;
}

// Get test file from project
ethReturnProjectTest = function ethReturnProjectTest(contractAddress, fromAddress, fromPassword, testsHash){
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(fromAddress, fromPassword);

  var testSig = targetContract.returnTest(testsHash)
  
  return testSig;
}

// Add new version to project
ethSetVersion = function ethSetVersion(contractAddress, fromAddress, templateHash, templateSig){
  web3.eth.defaultAccount=fromAddress;
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  var transactionHash = targetContract.setVersion(templateHash, templateSig, {gas: 250000});
  
  // Below used for determining gas from transaction
  //var receipt = web3.eth.getTransactionReceipt(transactionHash);
  //console.log(receipt.gasUsed);

  return transactionHash;
}

// Get version from project
ethReturnVersionSig = function ethReturnVersionHash(contractAddress,  fromAddress, versionHash){
  web3.eth.defaultAccount=fromAddress;
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  var versionSig = targetContract.returnVersion(versionHash);


  return versionSig;
}

// Get owner address from project
ethReturnOwnerAddress = function ethReturnOwnerAddress(contractAddress){
  var targetContract = projectContractAbi.at(contractAddress);
  //web3.personal.unlockAccount(ownerAddress, ownerPassword);

  return targetContract.owner();
}